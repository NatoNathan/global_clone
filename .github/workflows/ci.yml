name: CI

on:
  push:
    branches:
      - main
      - feature/*
    tags:
      - "v**"
  pull_request:
  


jobs:
  test:
    name: Test (${{ matrix.os }})
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04, windows-2022, macos-11, macos-12]
        toolchain: [stable]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
      - uses: actions-rs/cargo@v1
        with:
          command: build
      - uses: actions-rs/cargo@v1
        with:
          command: test
  
  build_unix:
    # only run on a version tag
    needs: [test]
    name: Release Build (${{ matrix.os }})
    if: startsWith(github.ref, 'refs/tags/v')
    env:
      ARTIFACTS_DIR: ${{ matrix.file_name }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            toolchain: stable
            target: x86_64-unknown-linux-musl
            file_name: global_clone_linux_amd64.tar.gz
          - os: macos-latest
            toolchain: stable
            target: x86_64-apple-darwin
            file_name: global_clone_macos_amd64.tar.gz
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          target: ${{ matrix.target }}
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
      # prepare release artifacts
      - name: make temp dir
        run: |
          mkdir $ARTIFACTS_DIR
      - name: copy artifacts
        run: |
          cp target/release/global_clone $ARTIFACTS_DIR/global_clone
          cp README.md $ARTIFACTS_DIR/README.md
          cp LICENSE $ARTIFACTS_DIR/LICENSE
      - name: ad-hoc codesign if macos
        if: ${{ matrix.os }} == macos-latest
        run: |
          codesign -s - $ARTIFACTS_DIR/global_clone
      - name: Prepare Release Tarball
        run: tar czf ${{ matrix.target }}_${{ github.ref_name }}.tar.gz $ARTIFACTS_DIR
      - name: Upload Release Tarball
        uses: actions/upload-artifact@v3
        with:
          name: global_clone_${{ github.ref_name }}
          path: ${{ matrix.target }}.tar.gz

  build_win:
    # only run on a version tag
    needs: [test]
    name: Release Build (${{ matrix.os }})
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            toolchain: stable
            target: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          target: ${{ matrix.target }}
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
      - name: Upload Release exe
        uses: actions/upload-artifact@v3
        with:
          name: global_clone_${{ github.ref_name }}
          path: target/release/global_clone.exe

  build_packages:
    needs: [test]
    name: Build ${{ matrix.pm }}-${{ matrix.target }} Package
    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            toolchain: stable
            target: x86_64-unknown-linux-musl
            pm: Debian
            pm_crate: cargo-deb
            pm_build_cmd: cargo deb --output artifacts/deb/
            package_path: artifacts/deb/global_clone_linux_amd64.deb
          - os: ubuntu-latest
            toolchain: stable
            target: x86_64-unknown-linux-musl
            pm: RPM
            pm_crate: cargo-rpm
            pm_build_cmd: cargo rpm build --output artifacts/rpm/
            package_path: artifacts/rpm/global_clone_linux_amd64.rpm
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          target: ${{ matrix.target }}
      - uses: actions-rs/install@v0.1
        with:
          crate: ${{ matrix.pm_crate }}
          version: latest
          use-tool-cache: true
      - run: ${{ matrix.pm_build_cmd }}
      - name: Upload Package
        uses: actions/upload-artifact@v3
        with:
          name: global_clone_${{ github.ref_name }}
          path: ${{ matrix.package_path }}/*
  
  release:
    needs: [build_unix, build_win, build_packages]
    name: Release ( ${{ github.ref_name }} )
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: make temp dir
        run: mkdir artifacts
      # download the release tarballs
      - name: download global_clone tarballs
        uses: actions/download-artifact@v3
        with:
          name: global_clone_${{github.ref_name}}
          path: artifacts
      # Make github release
      - name: Make github release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*